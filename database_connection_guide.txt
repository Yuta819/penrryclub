データベース接続ガイド

このガイドは、外部データベース（PostgreSQL）に接続する手順を詳細に説明します。

1. データベースの準備:
   - PostgreSQLをインストールしていない場合は、公式サイト(https://www.postgresql.org/download/)からダウンロードしてインストールしてください。
   - PostgreSQLをインストールしたら、新しいデータベースを作成します。
     例: createdb university_clubs

2. 環境変数の設定:
   - プロジェクトのルートディレクトリに `.env` ファイルを作成します（まだない場合）。
   - 以下の行を `.env` ファイルに追加します：
     DATABASE_URL="postgresql://username:password@localhost:5432/university_clubs?schema=public"
   - username と password を自分のPostgreSQLの認証情報に置き換えてください。

3. Prismaの設定:
   - 既に Prisma をインストールしていない場合は、以下のコマンドでインストールします：
     npm install prisma --save-dev
   - Prisma CLIをインストールします：
     npm install @prisma/client

4. データベースマイグレーション:
   - 以下のコマンドを実行して、データベースにスキーマを適用します：
     npx prisma migrate dev --name init
   - このコマンドは新しいマイグレーションファイルを作成し、データベースを更新します。

5. Prismaクライアントの生成:
   - 以下のコマンドを実行して、Prismaクライアントを生成します：
     npx prisma generate

6. アプリケーションでのデータベース接続:
   - src/lib/prisma.ts ファイルを作成し、以下のコードを追加します：

   import { PrismaClient } from '@prisma/client'

   let prisma: PrismaClient

   if (process.env.NODE_ENV === 'production') {
     prisma = new PrismaClient()
   } else {
     if (!global.prisma) {
       global.prisma = new PrismaClient()
     }
     prisma = global.prisma
   }

   export default prisma

   - このファイルをインポートして、アプリケーション内でデータベース操作を行います。

注意点:
1. セキュリティ:
   - .env ファイルは絶対にGitにコミットしないでください。.gitignore ファイルに .env を追加してください。
   - 本番環境では、強力なパスワードを使用し、定期的に更新してください。
   - データベースへのアクセスは必要最小限の権限に制限してください。

2. パフォーマンス:
   - 大量のデータを扱う場合は、ページネーションを実装してください。
   - 複雑なクエリはインデックスを適切に設定して最適化してください。

3. エラーハンドリング:
   - データベース操作時は適切なエラーハンドリングを行い、ユーザーフレンドリーなエラーメッセージを表示してください。

4. バックアップ:
   - 定期的にデータベースのバックアップを取ることを忘れないでください。

5. スケーリング:
   - アプリケーションが成長した場合、コネクションプールの設定やレプリケーションの導入を検討してください。

6. 環境ごとの設定:
   - 開発、テスト、本番環境で異なるデータベースを使用することをお勧めします。

このガイドを参考に、準備が整ったら外部データベースに接続してください。不明な点があれば、ドキュメントを参照するか、経験豊富な開発者に相談することをお勧めします。

